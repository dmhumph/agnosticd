# vim: set ft=ansible
---
# Implement your Workload deployment tasks here

# Nuke quotas
- name: TODO - need to replace with proper quotas
  shell: |
         oc delete userquota/default
  ignore_errors: true

# Access for admin
- name: Give access to opentlc-mgr
  shell: |
         oc adm policy add-cluster-role-to-user cluster-admin opentlc-mgr

# Create projects for user
- name: create projects for users
  include_tasks: create_project.yaml
  vars:
    user: "{{ item }}"
  with_list: "{{ users }}"

- name: ensure file exists
  copy:
    content: ""
    dest: /tmp/{{ htpasswd_file_name }}
    force: no
    group: root
    owner: root
    mode: 0755

# Populate htaccess file for each user
- name: create projects for users
  command: htpasswd -B -b /tmp/{{ htpasswd_file_name }} {{ item }} {{ item | replace('user', 'pass') }}
  vars:
    user: "{{ item }}"
  with_list: "{{ users }}"

- name: Create the HTPasswd Secret to use the HTPasswd identity provider
  command:  oc create secret generic {{ htpasswd_secert_name }} --from-file=htpasswd=/tmp/{{ htpasswd_file_name }}  -n openshift-config

- name: Deploy htpasswd-provider
  command: "oc create -f  /tmp/htpasswd-provider.yaml"
  register: deployment_result

# Deploy guides
- name: create guides project
  k8s:
    state: present
    kind: Project
    api_version: project.openshift.io/v1
    definition:
      metadata:
        name: "guides"
        annotations:
          openshift.io/description: ""
          openshift.io/display-name: "Quarkus Workshop Guides"

- name: deploy guides
  shell: >
    oc new-app -n guides quay.io/osevg/workshopper --name=web
    -e CHE_USER_NAME='{{ workshop_che_user_name}}'
    -e CHE_USER_PASSWORD='{{ workshop_che_user_password }}'
    -e OPENSHIFT_USER_NAME='{{ workshop_openshift_user_name }}'
    -e OPENSHIFT_USER_PASSWORD='{{ workshop_openshift_user_password }}'
    -e MASTER_URL={{ master_url }}
    -e CONSOLE_URL={{ console_url }}
    -e CHE_URL='http://codeready-che.{{ route_subdomain }}'
    -e KEYCLOAK_URL='http://keycloak-che.{{ route_subdomain }}'
    -e ROUTE_SUBDOMAIN={{ route_subdomain }}
    -e CONTENT_URL_PREFIX='https://raw.githubusercontent.com/RedHatWorkshops/quarkus-workshop/master/docs/'
    -e WORKSHOPS_URLS='https://raw.githubusercontent.com/RedHatWorkshops/quarkus-workshop/master/docs/{{ workshop_labs_url }}'
    -e LOG_TO_STDOUT=true
  ignore_errors: true

- name: create the Route for guides
  k8s:
    namespace: guides
    state: present
    kind: Route
    definition:
      metadata:
        name: web
        labels:
          app: web
      spec:
        host: ''
        to:
          kind: Service
          name: web
          weight: 100
        port:
          targetPort: 8080-tcp
  register: Route

# Install Che via operator
- name: Create OpenShift Objects for Che
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/codeready_namespace.yaml
  - ./files/codeready_operatorgroup.yaml
  - ./files/codeready_catalog_source.yaml
  - ./files/codeready_subscription.yaml

- name: Wait for CodeReady CRD
  k8s_facts:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: checlusters.org.eclipse.che
  register: r_codeready_crd
  retries: 200
  delay: 10
  ignore_errors: yes
  until: r_codeready_crd.resources | list | length == 1

- name: Notify user if CodeReady deployment failed
  when: not r_codeready_crd.resources | list | length == 1
  debug:
    msg: "user.info: *** CodeReady operator could not be installed ***"

- name: Look for CodeReady CR
  k8s_facts:
    kind: CheCluster
    namespace: che
    name: codeready
  register: r_codeready_cr

- name: show cr
  debug:
    msg: "existing codeready cr: {{ r_codeready_cr }}"

- name: Create OpenShift Objects for CodeReady if not existing
  when: r_codeready_cr.resources | list | length == 0
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/codeready.yaml

- name: wait for CRW to be running
  uri:
    url: "http://codeready-che.{{ route_subdomain }}/dashboard/"
    validate_certs: false
  register: result
  until: result.status == 200
  retries: "120"
  delay: "15"
  tags: eclipse-che

- name: Search for CodeReady ConfigMap
  k8s_facts:
    kind: ConfigMap
    namespace: che
    name: custom
  register: codeready_cm

- name: show cm object
  debug:
    msg: "Codeready Configmap: {{ codeready_cm }}"

# Workaround for PVC problem
- name: Alternative to volumeBindingMode=WaitForFirstConsumer
  when: (codeready_cm.resources[0].data.CHE_INFRA_KUBERNETES_PVC_WAIT__BOUND is undefined) or (codeready_cm.resources[0].data.CHE_INFRA_KUBERNETES_PVC_WAIT__BOUND == true)
  k8s:
    state: present
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('file', './files/cm-custom-codeready.yaml' ) | from_yaml }}"

- name: Search for CodeReady Pod
  k8s_facts:
    kind: Pod
    namespace: che
    label_selectors:
    - app = codeready
    - component = codeready
  register: codeready_pod

- name: Restart CodeReady Pod
  when: (codeready_cm.resources[0].data.CHE_INFRA_KUBERNETES_PVC_WAIT__BOUND is undefined) or (codeready_cm.resources[0].data.CHE_INFRA_KUBERNETES_PVC_WAIT__BOUND == true)
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ codeready_pod.resources[0].metadata.name }}"
    namespace: che

- name: wait for CRW to be running after PVC workaround
  when: (codeready_cm.resources[0].data.CHE_INFRA_KUBERNETES_PVC_WAIT__BOUND is undefined) or (codeready_cm.resources[0].data.CHE_INFRA_KUBERNETES_PVC_WAIT__BOUND == true)
  uri:
    url: "http://codeready-che.{{ route_subdomain }}/dashboard/"
  register: result
  until: result.status == 200
  retries: "120"
  delay: "15"
  tags: eclipse-che

# get ingress host
- name: Get ingress host
  k8s_facts:
    api_version: v1
    kind: Service
    name: router-default
    namespace: openshift-ingress
  register: r_router_default

- name: Show ingress object
  debug:
    msg: "Ingress object: {{ r_router_default }}"

- name: Show ingress host name
  debug:
    msg: "Ingress hostname: {{ r_router_default.resources[0].status.loadBalancer.ingress[0].hostname }}"

# Fix AWS ELB connection timeout
- name: Get ELB name
  shell: |
    aws elb describe-load-balancers --region {{ aws_region }} | jq  '.LoadBalancerDescriptions |
      map(select( .DNSName == "{{ r_router_default.resources[0].status.loadBalancer.ingress[0].hostname }}"))' |
      jq -r '.[0].LoadBalancerName'
  register: lbname
  when: fix_load_balancer

- name: Show load balancer name
  debug:
    msg: "Load balancer name: {{ lbname.stdout }}"
  when: fix_load_balancer

- name: Fix load balancer
  shell: |
    aws elb modify-load-balancer-attributes --region {{ aws_region }} --load-balancer-name {{ lbname.stdout }} --load-balancer-attributes "{\"ConnectionSettings\":{\"IdleTimeout\":300}}"
  when: fix_load_balancer
  
# add keycloak realm
- name: Get SSO username
  shell: |
    oc get deployment keycloak -n che -o=jsonpath={'.spec.template.spec.containers[0].env[?(@.name=="SSO_ADMIN_USERNAME")].value'}
  register: sso_admin_username

- name: Get SSO password
  shell: |
    oc get deployment keycloak -n che -o=jsonpath={'.spec.template.spec.containers[0].env[?(@.name=="SSO_ADMIN_PASSWORD")].value'}
  register: sso_admin_password

- name: Print SSO connection info
  debug:
    msg: "url: http://keycloak-che.{{ route_subdomain }} username: {{ sso_admin_username.stdout }} password: {{ sso_admin_password.stdout }}"

- name: Get SSO admin token
  uri:
    url: "http://keycloak-che.{{ route_subdomain }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body:
      username: "{{ sso_admin_username.stdout }}"
      password: "{{ sso_admin_password.stdout }}"
      grant_type: "password"
      client_id: "admin-cli"
    body_format: form-urlencoded
    status_code: 200,201,204
  register: sso_admin_token

- name: Print SSO token connection info
  debug:
    msg: "Bearer {{ sso_admin_token.json.access_token }}"

- name: Import realm
  uri:
    url: "http://keycloak-che.{{ route_subdomain }}/"
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ sso_admin_token.json.access_token }}"
    body: "{{ lookup('file', './files/quarkus-realm.json') }}"
    ## accept 409 Conflict in case realm exists
    status_code: 200,201,204,409

# Add users to Che
- name: Add users to che
  include_tasks: add_che_user.yaml
  vars:
    user: "{{ item }}"
  with_list: "{{ users }}"

# Import stack definition
# - name: Get Che admin token
#   uri:
#     url: http://keycloak-che.{{ route_subdomain }}/auth/realms/codeready/protocol/openid-connect/token
#     method: POST
#     body:
#       username: admin
#       password: admin
#       grant_type: "password"
#       client_id: "admin-cli"
#     body_format: form-urlencoded
#     status_code: 200,201,204
#   register: che_admin_token

# - name: Get admin token for che access
#   debug:
#     msg: "{{ che_admin_token }}"

# - name: Import stack definition
#   uri:
#     url: http://codeready-che.{{ route_subdomain }}/stack/createStack
#     method: POST
#     headers:
#       Content-Type: application/json
#       Authorization: "Bearer {{ che_admin_token.json.access_token }}"
#     body: "{{ lookup('file', './files/stack.json') }}"
#     body_format: json
#     ## accept 409 in case it already exists
#     status_code: 201,409

# # Get stack definition
# - name: Get stack definitions
#   uri:
#     url: http://codeready-che.{{ route_subdomain }}/stack
#     method: GET
#     headers:
#       Authorization: "Bearer {{ che_admin_token.json.access_token }}"
#     status_code: 200
#   register: stack_definitions

# - name: Set Stack permissions
#   uri:
#     url: http://codeready-che.{{ route_subdomain }}/permissions
#     method: POST
#     headers:
#       Content-Type: application/json
#       Authorization: "Bearer {{ che_admin_token.json.access_token }}"
#     body:
#       userId: "*"
#       domainId: "stack"
#       instanceId: "{{ item }}"
#       actions: ["read", "search"]
#     body_format: json
#     status_code: 204
#   with_list: "{{ stack_definitions | json_query('json[*].id') }}"

# Adjust che limits
- name: Delete default limitrange
  shell: |
    oc delete limitrange che-core-resource-limits -n che
  ignore_errors: true

- name: Create a new limitrange
  template:
    src: ./templates/che-limitrange.j2
    dest: /tmp/che-limitrange.yaml
- shell: |
    oc create -f /tmp/che-limitrange.yaml -n che

# - name: Import stack imagestream
#   k8s:
#     state: present
#     merge_type:
#     - strategic-merge
#     - merge
#     definition: "{{ lookup('template', item ) | from_yaml }}"
#   loop:
#   - ./templates/stack.imagestream.j2

# - name: Wait for ImageStream definition
#   k8s_facts:
#     kind: ImageStream
#     name: quarkus-stack
#     namespace: openshift
#   register: r_imagestream_d
#   retries: 200
#   delay: 10
#   ignore_errors: yes
#   until: r_imagestream_d.resources | list | length == 1

# - name: print imagestream
#   debug:
#     msg: "imagestream: {{ r_imagestream_d }}"

# - name: import imagestream
#   shell: |
#     oc import-image --all quarkus-stack -n openshift

# - name: Pre-create user workspaces
#   include_tasks: create_che_workspace.yaml
#   vars:
#     user: "{{ item }}"
#   with_list: "{{ users }}"


  # Install Strimzi operator for all workspaces
  # Install Che via operator
#- name: Create OpenShift Objects for Strimzi
#  k8s:
#    state: present
#    merge_type:
#    - strategic-merge
#    - merge
#    definition: "{{ lookup('file', item ) | from_yaml }}"
#  loop:
#  - ./files/strimzi_catalog_source.yaml
#  - ./files/strimzi_subscription.yaml

- name: Create operator
  k8s:
    state: present
    namespace: "openshift-operators"
    definition: "{{ lookup('file', role_path ~ '/files/amq-streams/operator.yml' ) | from_yaml }}"

- name: Wait until csv/{{ _amqstreams_csv_verison }} is Succeeded
  command: >
    oc get csv/{{ _amqstreams_csv_verison }} -o jsonpath='{.status.phase}' -n "openshift-operators"
  register: streamscsv
  retries: "200"
  delay: "30"
  until: streamscsv.stdout == "Succeeded"

# Deploy nexus
- name: Deploy nexus
  import_tasks: ./nexus.yml
#  become: true
#  tags: nexus

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
